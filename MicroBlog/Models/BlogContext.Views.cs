//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MicroBlog.Models.BlogContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets3b24c4815322a98ec2bbc3386c88c85a89a95363427fc8fd693078cee4c15715))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets3b24c4815322a98ec2bbc3386c88c85a89a95363427fc8fd693078cee4c15715 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "3b24c4815322a98ec2bbc3386c88c85a89a95363427fc8fd693078cee4c15715"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.PostModel")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.UserModel")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.UserModelUserModel")
            {
                return GetView2();
            }

            if (extentName == "BlogContext.Posts")
            {
                return GetView3();
            }

            if (extentName == "BlogContext.PostModel_Author")
            {
                return GetView4();
            }

            if (extentName == "BlogContext.Users")
            {
                return GetView5();
            }

            if (extentName == "BlogContext.UserModel_Follows")
            {
                return GetView6();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PostModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostModel
        [CodeFirstDatabaseSchema.PostModel](T3.PostModel_Id, T3.PostModel_CreationTime, T3.PostModel_Text, T3.[PostModel.Author_Id])
    FROM (
        SELECT T1.PostModel_Id, T2.PostModel_CreationTime, T2.PostModel_Text, T1.[PostModel.Author_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.PostModel_Author_Source).Id AS PostModel_Id, 
                Key(T.PostModel_Author_Target).Id AS [PostModel.Author_Id], 
                True AS _from1
            FROM BlogContext.PostModel_Author AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS PostModel_Id, 
                T.CreationTime AS PostModel_CreationTime, 
                T.Text AS PostModel_Text, 
                True AS _from0
            FROM BlogContext.Posts AS T) AS T2
            ON T1.PostModel_Id = T2.PostModel_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserModel
        [CodeFirstDatabaseSchema.UserModel](T1.UserModel_Id, T1.UserModel_Name)
    FROM (
        SELECT 
            T.Id AS UserModel_Id, 
            T.Name AS UserModel_Name, 
            True AS _from0
        FROM BlogContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserModelUserModel.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserModelUserModel
        [CodeFirstDatabaseSchema.UserModelUserModel](T1.[UserModelUserModel.follower_user_id], T1.[UserModelUserModel.followed_user_id])
    FROM (
        SELECT 
            Key(T.UserModel_Follows_Source).Id AS [UserModelUserModel.follower_user_id], 
            Key(T.UserModel_Follows_Target).Id AS [UserModelUserModel.followed_user_id], 
            True AS _from0
        FROM BlogContext.UserModel_Follows AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for BlogContext.Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Posts
        [MicroBlog.Models.PostModel](T1.PostModel_Id, T1.PostModel_CreationTime, T1.PostModel_Text) WITH 
        RELATIONSHIP(CREATEREF(BlogContext.Users, ROW(T1.[PostModel_Author.PostModel_Author_Target.Id]),[MicroBlog.Models.UserModel]),[MicroBlog.Models.PostModel_Author],PostModel_Author_Source,PostModel_Author_Target) 
    FROM (
        SELECT 
            T.Id AS PostModel_Id, 
            T.CreationTime AS PostModel_CreationTime, 
            T.Text AS PostModel_Text, 
            True AS _from0, 
            T.Author_Id AS [PostModel_Author.PostModel_Author_Target.Id]
        FROM CodeFirstDatabase.PostModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for BlogContext.PostModel_Author.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostModel_Author
        [MicroBlog.Models.PostModel_Author](T3.[PostModel_Author.PostModel_Author_Source], T3.[PostModel_Author.PostModel_Author_Target])
    FROM (
        SELECT -- Constructing PostModel_Author_Source
            CreateRef(BlogContext.Posts, row(T2.[PostModel_Author.PostModel_Author_Source.Id]), [MicroBlog.Models.PostModel]) AS [PostModel_Author.PostModel_Author_Source], 
            T2.[PostModel_Author.PostModel_Author_Target]
        FROM (
            SELECT -- Constructing PostModel_Author_Target
                T1.[PostModel_Author.PostModel_Author_Source.Id], 
                CreateRef(BlogContext.Users, row(T1.[PostModel_Author.PostModel_Author_Target.Id]), [MicroBlog.Models.UserModel]) AS [PostModel_Author.PostModel_Author_Target]
            FROM (
                SELECT 
                    T.Id AS [PostModel_Author.PostModel_Author_Source.Id], 
                    T.Author_Id AS [PostModel_Author.PostModel_Author_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.PostModel AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for BlogContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MicroBlog.Models.UserModel](T1.UserModel_Id, T1.UserModel_Name)
    FROM (
        SELECT 
            T.Id AS UserModel_Id, 
            T.Name AS UserModel_Name, 
            True AS _from0
        FROM CodeFirstDatabase.UserModel AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for BlogContext.UserModel_Follows.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserModel_Follows
        [MicroBlog.Models.UserModel_Follows](T3.[UserModel_Follows.UserModel_Follows_Source], T3.[UserModel_Follows.UserModel_Follows_Target])
    FROM (
        SELECT -- Constructing UserModel_Follows_Source
            CreateRef(BlogContext.Users, row(T2.[UserModel_Follows.UserModel_Follows_Source.Id]), [MicroBlog.Models.UserModel]) AS [UserModel_Follows.UserModel_Follows_Source], 
            T2.[UserModel_Follows.UserModel_Follows_Target]
        FROM (
            SELECT -- Constructing UserModel_Follows_Target
                T1.[UserModel_Follows.UserModel_Follows_Source.Id], 
                CreateRef(BlogContext.Users, row(T1.[UserModel_Follows.UserModel_Follows_Target.Id]), [MicroBlog.Models.UserModel]) AS [UserModel_Follows.UserModel_Follows_Target]
            FROM (
                SELECT 
                    T.follower_user_id AS [UserModel_Follows.UserModel_Follows_Source.Id], 
                    T.followed_user_id AS [UserModel_Follows.UserModel_Follows_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.UserModelUserModel AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
